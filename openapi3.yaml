openapi: 3.0.1
info:
  title: discrete-overseer-creator
  description: service that responsible for validating and ingesting discrete layers
  version: 4.1.6
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
paths:
  /layers:
    post:
      operationId: createLayer
      tags:
        - layers
      summary: start a process of creating new layer from raw data
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                ./Schema/discreteIngestion/ingestionParams.yaml#/components/schemas/IngestionParams
            examples:
              createLayerExample:
                $ref: '#/components/examples/createLayerExample'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: OK
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
        '409':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
        '500':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
  /layers/{recordId}:
    parameters:
      - in: path
        name: recordId
        description: ID of layer's record in catalog
        required: true
        schema:
          type: string
          format: uuid
    put:
      operationId: updateLayer
      tags:
        - layers
      summary: start a process of creating update to exists layer from raw data
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLayerPolygonPartsParams'
            # examples:
            #   createLayerExample:
            #     $ref: '#/components/examples/createLayerExample'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: OK
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
        '409':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
        '500':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
  /jobs/{jobId}/{taskId}/completed:
    post:
      operationId: completeJob
      tags:
        - jobs
      summary: update overseer on completion of a job
      parameters:
        - in: path
          name: jobId
          schema:
            type: string
            format: uuid
          required: true
          description: job id
        - in: path
          name: taskId
          schema:
            type: string
            format: uuid
          required: true
          description: task id
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: OK
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
        '404':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
        '500':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
  /toc:
    post:
      operationId: getToc
      tags:
        - toc
      summary: gets a toc file representing the given layer
      requestBody:
        description: A json object containing operation and toc source type
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                productVersion:
                  type: string
                operation:
                  $ref: '#/components/schemas/operation'
                productType:
                  $ref: '#/components/schemas/productType'
              required:
                - productId
                - productVersion
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tocResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/tocResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
        '404':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
        '500':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
components:
  schemas:
    errorMessage:
      type: object
      properties:
        message:
          type: string
        stacktrace:
          type: string
      required:
        - message
    tocResponse:
      type: object
      properties:
        operation:
          $ref: '#/components/schemas/operation'
        productType:
          $ref: '#/components/schemas/productType'
        metadata:
          oneOf:
            - $ref: >-
                ./Schema/updateLayerMetadata.yaml#/components/schemas/updateLayerMetadata
            - type: object
              properties:
                productId:
                  type: string
                productVersion:
                  type: string
    operation:
      type: string
      enum:
        - ADD
        - UPDATE
        - REMOVE
    productType:
      $ref: ./Schema/updateLayerMetadata.yaml#/components/schemas/productType

    recordId:
      type: string
      format: uuid
    UpdateLayerPolygonPartsParams:
      type: object
      description: update parameters
      required:
        - partData
        - originDirectory
        - fileNames
      properties:
        partData:
          type: array
          items:
            $ref: '#/components/schemas/updateLayerMetadata'
        originDirectory:
          type: string
          description: layer source directory
        fileNames:
          type: array
          description: layer sources
          items:
            type: string
            pattern: >-
              ^.+(\.([Tt][Ii][Ff][Ff]?|[Gg][Pp][Kk][Gg]|[Jj][Pp][2Cc]|[Jj]2[Kk]|[Ee][Cc][Ww]))$ 


    updateLayerMetadata:
      type: object
      description: layer meta data
      required:
        - productVersion
        - footprint
        - maxResolutionDeg
      properties:
        classification:
          type: string
          description: Permitted roles
        productId:
          type: string
          description: Layer's external identifier
          pattern: ^[a-zA-Z0-9_-]+$
        productName:
          type: string
          description: Layer's external name
        productVersion:
          type: string
          description: version of updated layer 
        productType:
          $ref: './Schema/updateLayerMetadata.yaml#/components/schemas/productType'
        productSubType:
          type: string
          description: Layer's sub type
        description:
          type: string
        srsId:
          type: string
          description: geo system id
        srsName:
          type: string
          description: geo system name
        producerName:
          type: string
          description: creator name default IDFMU
        sourceDateStart:
          type: string
          description: Oldest imaging date
          format: date-time
        sourceDateEnd:
          type: string
          description: Latest imaging date
          format: date-time
        maxResolutionDeg:
          type: number
          minimum: 9.e-8
          maximum: 0.072
          format: double
          description: max resolution of layer in degrees/pixel
        maxResolutionMeter:
          type: number
          minimum: 0.01
          maximum: 8000
          format: double
          description: max resolution of layer in meters
        minHorizontalAccuracyCE90:
          type: number
          minimum: 0.01
          maximum: 4000
          format: double
          description: minimum Horizontal Accuracy
        sensors:
          type: array
          items:
            type: string
          description: Layer sensors list
        region:
          type: array
          items:
            type: string
          description: regions included in the layer
        rms:
          type: number
        scale:
          type: integer
          minimum: 0
          maximum: 100000000
        footprint:
          $ref: ./Schema/geojson.yaml#/components/schemas/Geometry


  examples:
    createLayerExample:
      value:
        metadata:
          type: RECORD_RASTER
          classification: string
          productId: string
          productName: string
          productVersion: '47.1'
          productType: Orthophoto
          productSubType: string
          description: string
          srsId: string
          srsName: string
          producerName: string
          creationDate: '2022-10-25T10:44:42.787Z'
          sourceDateStart: '2022-10-25T10:44:42.787Z'
          sourceDateEnd: '2022-10-25T10:44:42.787Z'
          maxResolutionDeg: 0.072
          maxResolutionMeter: 8000
          minHorizontalAccuracyCE90: 4000
          transparency: TRANSPARENT
          sensors:
            - string
          region:
            - string
          rms: 0
          scale: 100000000
          footprint:
            type: Polygon
            coordinates:
              - - - -180
                  - -90
                - - -180
                  - 90
                - - 180
                  - 90
                - - 180
                  - -90
                - - -180
                  - -90
          productBoundingBox: '-180,-90,180,90'
        originDirectory: string
        fileNames:
          - example.tif
