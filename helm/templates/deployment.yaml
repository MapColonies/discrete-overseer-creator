{{- $releaseName := .Release.Name -}}
{{- $chartName := include "discrete-overseer-creator.name" . -}}
{{- $deploymentName := include "deployment.fullname" . }}
{{- $configmapName := include "configmap.fullname" . }}
{{- $cloudProviderFlavor := include "discrete-overseer-creator.cloudProviderFlavor" . -}}
{{- $cloudProviderDockerRegistryUrl := include "discrete-overseer-creator.cloudProviderDockerRegistryUrl" . -}}
{{- $cloudProviderImagePullSecretName := include "discrete-overseer-creator.cloudProviderImagePullSecretName" . -}}
{{- $fs := (include "common.fs.merged" .) | fromYaml }}
{{- $imageTag := include "discrete-overseer-creator.tag" . -}}
{{- if .Values.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $deploymentName }}
  labels:
    app: {{ $chartName }}
    component: {{ $chartName }}
    environment: {{ include "discrete-overseer-creator.environment" . }}
    release: {{ $releaseName }}
    {{- if .Values.global.useNodeAffinity }}
    nodeAffinity: nodeAffinityPod
    {{- end }}
    {{- include "discrete-overseer-creator.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ $chartName }}
      release: {{ $releaseName }}
      run: {{ $releaseName }}-{{ $chartName }}
      {{- if .Values.global.useNodeAffinity }}
      nodeAffinity: nodeAffinityPod
      {{- end }}
      {{- include "discrete-overseer-creator.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: {{ $chartName }}
        release: {{ $releaseName }}
        run: {{ $releaseName }}-{{ $chartName }}
        {{- if .Values.global.useNodeAffinity }}
        nodeAffinity: nodeAffinityPod
        {{- end }}
        {{- include "discrete-overseer-creator.selectorLabels" . | nindent 8 }}
      {{- if .Values.resetOnConfigChange }}
      annotations:
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- if .Values.env.metrics.enabled }}
        prometheus.io/port: {{ .Values.env.metrics.prometheus.port | quote }}
        prometheus.io/scrape: {{ .Values.env.metrics.prometheus.scrape | quote }}
        {{- end }}
      {{- end }}
    spec:
    {{- if $cloudProviderImagePullSecretName }}
      imagePullSecrets:
        - name: {{ $cloudProviderImagePullSecretName | quote }}
    {{- end }}
      containers:
        - name: {{ $releaseName }}
          {{- with .Values.image }}
          image: {{ $cloudProviderDockerRegistryUrl }}{{ .repository }}:{{ $imageTag }}
          {{- end }}
          volumeMounts:
          {{- if $fs.ingestionSourcePvc.enabled }}
            - name: ingestion-storage
              mountPath: /layerSources
              {{- if $fs.ingestionSourcePvc.subPath }}
              subPath: {{ $fs.ingestionSourcePvc.subPath }}
              {{- end }}
          {{- end }}
            - name: link-templates
              mountPath: {{ .Values.env.linksTemplate.mountPath }}/{{ .Values.env.linksTemplate.fileName }}
              subPath: {{ .Values.env.linksTemplate.fileName }}
            {{- if .Values.global.ca.secretName }}
            - mountPath: {{ printf "%s/%s" .Values.global.ca.path .Values.global.ca.key | quote }}
              name: root-ca
              subPath: {{ quote .Values.global.ca.key }}
            {{- end }}
          env:
            - name: SERVER_PORT
              value: {{ .Values.env.targetPort | quote }}
            {{- if .Values.global.ca.secretName }}
            - name: REQUESTS_CA_BUNDLE
              value: {{ printf "%s/%s" .Values.global.ca.path .Values.global.ca.key | quote }}
            - name: NODE_EXTRA_CA_CERTS
              value: {{ printf "%s/%s" .Values.global.ca.path .Values.global.ca.key | quote }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ $configmapName  }}
          ports:
            - name: http
              containerPort: {{ .Values.env.targetPort }}
              protocol: {{ .Values.env.protocol }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.initialDelaySeconds }}
            httpGet:
              path: /liveness
              port: {{ .Values.env.targetPort }}
          {{- if .Values.resources.enabled }}
          resources:
            {{- toYaml .Values.resources.value | nindent 12 }}
          {{- end }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
      volumes:
        {{- if .Values.global.ca.secretName }}
        - name: root-ca
          secret:
            secretName: {{ .Values.global.ca.secretName }}
        {{- end }}
        {{- if $fs.ingestionSourcePvc.enabled }}
        - name: ingestion-storage
          persistentVolumeClaim:
            claimName: {{ quote $fs.ingestionSourcePvc.name }}
        {{- end }}
        - name: link-templates
          configMap:
            name: {{ $releaseName }}-configmap
            items:
              - key: LINK_TEMPLATE
                path: {{ .Values.env.linksTemplate.fileName }}
{{- end -}}
